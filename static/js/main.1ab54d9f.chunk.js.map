{"version":3,"sources":["component/templates/ApplicationHeader.tsx","component/atoms/ResetButton.tsx","component/atoms/AddButton.tsx","component/atoms/InputForm.tsx","component/molecules/TaskBar.tsx","component/atoms/SaveButton.tsx","container/templates/TaskList.tsx","component/atoms/IntoductionEdit.tsx","actions.ts","component/atoms/Intoduction.tsx","component/atoms/SignInButton.tsx","component/atoms/SignUpButton.tsx","component/pages/Home.tsx","component/atoms/BackToHomeButton.tsx","component/pages/SignInPage.tsx","reducer.ts","component/pages/SignUpPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApplicationHeader","signIn","signUp","signInButton","undefined","signUpButton","userName","useSelector","state","loginUser","className","ResetButton","reset","Button","color","onClick","AddButton","addTask","disabled","InputForm","inputValue","placeholder","onChangeHandler","type","value","onChange","TaskBar","targetTask","index","del","edit","refresh","useState","id","title","mode","editModeTask","setEditModeTask","taskListState","taskList","dispatch","useDispatch","toggleInvalidControlTarget","targetList","document","getElementsByClassName","Array","prototype","slice","call","forEach","target","classList","toggle","Item","Content","Icon","name","size","e","newEditTask","handleTaskTitle","onKeyPress","key","foundEditTask","find","task","newTasks","indexOf","onEnterForCompleteEdit","Header","onDoubleClick","editTarget","filter","t","length","SaveButton","url","signal","setSignal","isLoading","setIsLoading","isSaveSuccess","setIsSaveSuccess","loginUserState","useEffect","a","postData","push","taskName","requestOptions","method","headers","body","JSON","stringify","fetch","then","res","json","result","console","log","save","speed","animating","TaskList","add","setTaskName","idCnt","setIdCnt","setDisabled","newIdCnt","window","confirm","Group","drag-handle-selector","lockAxis","onDrop","dropResult","removedIndex","addedIndex","newTaskListState","arrayMove","map","IntroductionEdit","querySelector","vanishIntroduction","TaskListActionType","deleteTask","deleteIndex","editTask","refreshTask","refreshTaskList","list","LoginUserActionType","setLoginUser","loginUserName","Introduction","SignInButton","to","SignUpButton","Home","BackToHomeButton","SignInPage","setUserName","password","setPassword","redirectToHome","setRedirectToHome","errorMsgCode","setErrorMsgCode","refreshTarget","data","initialState","rootReducer","combineReducers","action","newTaskList","splice","SignUpPage","App","Helmet","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","catch","error","message","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1ab54d9f.chunk.js","sourcesContent":["import { ReactElement, VFC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../reducer';\n\ntype Props = {\n  signIn?: ReactElement;\n  signUp?: ReactElement;\n};\n\n/* ----- アプリケーション本体のヘッダー ------ */\nconst ApplicationHeader: VFC<Props> = ({ signIn, signUp }) => {\n  // もしサインアップが渡されていた場合、変数に代入\n  const signInButton = signIn !== undefined ? signIn : null;\n  const signUpButton = signUp !== undefined ? signUp : null;\n  const loginUserState = useSelector<RootState, string>(\n    (state: RootState) => state.loginUser,\n  );\n  const userName = loginUserState;\n\n  return (\n    <>\n      <header className=\"site-header\">\n        <div className=\"wrapper\">\n          <div className=\"site-header-inner\">\n            <h1>Drag & Drop TaskList</h1>\n            <div className=\"header-button-container\">\n              {userName} さん\n              {signInButton}\n              {signUpButton}\n            </div>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n};\n\nexport default ApplicationHeader;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----タスクを全て削除するためのResetボタン----- */\n\ntype Props = {\n  reset: () => void;\n};\n\nconst ResetButton: VFC<Props> = ({ reset }) => (\n  <Button className=\"controlItem\" color=\"google plus\" onClick={reset}>\n    Reset\n  </Button>\n);\n\nexport default ResetButton;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----タスクの追加ボタンコンポーネント----- */\n\ntype Props = {\n  addTask: () => void;\n  disabled: boolean;\n};\n\nconst AddButton: VFC<Props> = ({ addTask, disabled }) => (\n  <Button\n    className=\"controlItem\"\n    color=\"olive\"\n    onClick={addTask}\n    disabled={disabled}\n  >\n    +\n  </Button>\n);\n\nexport default AddButton;\n","import { VFC } from 'react';\n\n/* -----入力フォームのコンポーネント----- */\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\ntype Props = {\n  inputValue: string;\n  placeholder: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onChangeHandler: (target: any) => void;\n};\n\nconst InputForm: VFC<Props> = ({\n  inputValue,\n  placeholder,\n  onChangeHandler,\n}) => (\n  <input\n    type=\"text\"\n    placeholder={placeholder}\n    className=\"input-form controlItem\"\n    value={inputValue}\n    onChange={onChangeHandler}\n  />\n);\n\nexport default InputForm;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport { useState, VFC } from 'react';\nimport { Item, Icon, Button } from 'semantic-ui-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../reducer';\nimport { Task } from '../../Data/data';\n\n/* ---------個別のタスクを表現するコンポーネント--------- */\n\n/* ----------タスクの型定義---------- */\n// export type Task = {\n//   id: number;\n//   title: string;\n//   mode: string;\n// };\n\ntype Props = {\n  targetTask: Task;\n  index: number;\n  del?: (index: number) => void;\n  edit?: () => void;\n  refresh?: (list: Task[]) => void;\n};\n\n/* -------------------------------- */\nconst TaskBar: VFC<Props> = ({\n  targetTask,\n  index,\n  del = () => undefined,\n  edit = () => undefined,\n  refresh = () => undefined,\n}) => {\n  /* --------状態(state)の定義------------- */\n  // タスクを編集可能にするためのオブジェクト\n  const [editModeTask, setEditModeTask] = useState<Task>({\n    id: 0,\n    title: '',\n    mode: '',\n  });\n\n  /* ------------Store,Reducerに関する処理------------ */\n  // Storeに格納してあるタスクリストの本体\n  const taskListState = useSelector<RootState, Task[]>(\n    (state: RootState) => state.taskList,\n  );\n\n  // dispatcher\n  const dispatch = useDispatch();\n\n  /* ------------タスクのUpdateに関する処理------------ */\n\n  // タスクの編集中に他のコントロールを操作できないようにする処理\n  const toggleInvalidControlTarget = () => {\n    const targetList = document.getElementsByClassName('controlItem');\n    const tempTargetList = Array.prototype.slice.call(targetList);\n\n    tempTargetList.forEach((target) =>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      target.classList.toggle('event-invalid'),\n    );\n  };\n\n  // 編集用タスクに引数のタスクをセットして編集可能にする処理\n  const editTaskTitle = (editTarget: Task) => {\n    if (taskListState.filter((t) => t.mode === 'edit').length > 0) {\n      return;\n    }\n    const tempEditTarget = editTarget;\n    tempEditTarget.mode = 'edit';\n\n    // タスクのリストを更新して再レンダリングさせる\n    // call reducer\n    dispatch(edit());\n    setEditModeTask(targetTask);\n    toggleInvalidControlTarget();\n  };\n\n  // タスクの内容を編集する処理\n  const handleTaskTitle = (target: HTMLInputElement) => {\n    const newEditTask = { ...editModeTask };\n    newEditTask.title = target.value;\n    setEditModeTask(newEditTask);\n  };\n\n  // タスクの編集を完了する処理\n  const onEnterForCompleteEdit = (key: string) => {\n    if (key === 'Enter') {\n      // タスクリストの配列を最新化する\n      const foundEditTask = taskListState.find(\n        (task: Task) => task.mode === 'edit',\n      );\n      if (foundEditTask === undefined) {\n        return;\n      }\n      const newTasks = [...taskListState];\n      editModeTask.mode = 'display';\n      newTasks[newTasks.indexOf(foundEditTask)] = editModeTask;\n      // call reducer\n      dispatch(refresh(newTasks));\n      toggleInvalidControlTarget();\n    }\n  };\n\n  /* ------------------------------------------------------ */\n\n  return (\n    <Item key={targetTask.id} className=\"task\">\n      <Item.Content>\n        <Icon className=\"task-icon\" name=\"certificate\" size=\"big\" />\n        <span className=\"task-number\">{index + 1}</span>\n        {targetTask.mode === 'edit' ? (\n          <input\n            className=\"edit-input-form\"\n            type=\"text\"\n            value={editModeTask.title}\n            onChange={(e) => handleTaskTitle(e.target)}\n            onKeyPress={(e) => onEnterForCompleteEdit(e.key)}\n          />\n        ) : (\n          <Item.Header\n            className=\"task-header\"\n            onDoubleClick={() => editTaskTitle(targetTask)}\n          >\n            {targetTask.title}\n          </Item.Header>\n        )}\n        <Icon\n          className=\"drag-handle-selector controlItem\"\n          name=\"sort\"\n          size=\"big\"\n        />\n        <Button\n          className=\"delete controlItem\"\n          color=\"yellow\"\n          size=\"mini\"\n          onClick={() => dispatch(del(index))}\n        >\n          ×\n        </Button>\n      </Item.Content>\n    </Item>\n  );\n};\n\nexport default TaskBar;\n","/* eslint-disable no-console */\nimport { useState, useEffect, VFC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Button } from 'semantic-ui-react';\nimport { Spinner } from 'react-activity';\nimport { RootState } from '../../reducer';\nimport { Task } from '../../Data/data';\n\nconst SaveButton: VFC = () => {\n  // const url = 'http://localhost:5000/api/tasks/';\n  // const url =\n  //   'https://draganddroptasklist-env.eba-btryk2uf.ap-northeast-1.elasticbeanstalk.com/api/tasks/';\n  const url = 'https://omojuproduct.link/api/tasks/';\n\n  const [signal, setSignal] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaveSuccess, setIsSaveSuccess] = useState(false);\n  const taskListState = useSelector<RootState, Task[]>(\n    (state: RootState) => state.taskList,\n  );\n  const loginUserState = useSelector<RootState, string>(\n    (state: RootState) => state.loginUser,\n  );\n\n  const postTaskList = (): void => {\n    const newSignal = signal + 1;\n    setSignal(newSignal);\n    setIsSaveSuccess(false);\n  };\n\n  useEffect(() => {\n    async function save() {\n      try {\n        const postData: { taskName: string; userName: string }[] = [];\n        taskListState.forEach((task) => {\n          postData.push({ taskName: task.title, userName: loginUserState });\n        });\n\n        const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postData),\n        };\n\n        setIsLoading(true);\n        await fetch(url, requestOptions)\n          .then((res) => res.json())\n          .then((result) => {\n            console.log(result);\n            setIsSaveSuccess(true);\n          });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    // saveボタンが押下された際にのみ処理を実行する。\n    if (signal > 0) {\n      void save();\n      setIsLoading(false);\n      setSignal(0);\n    }\n  }, [signal, taskListState, loginUserState]);\n\n  return (\n    <>\n      <Button\n        className=\"save-button controlItem\"\n        color=\"violet\"\n        onClick={postTaskList}\n      >\n        Save\n      </Button>\n      {isSaveSuccess ? <p>Save is success👍</p> : null}\n      {isLoading ? (\n        <Spinner color=\"#727981\" size={32} speed={1} animating />\n      ) : null}\n    </>\n  );\n};\n\nexport default SaveButton;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\nimport { useState, VFC } from 'react';\nimport { Item } from 'semantic-ui-react';\nimport { Container, Draggable, DropResult } from 'react-smooth-dnd';\nimport arrayMove from 'array-move';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ResetButton from '../../component/atoms/ResetButton';\nimport AddButton from '../../component/atoms/AddButton';\nimport InputForm from '../../component/atoms/InputForm';\nimport { RootState } from '../../reducer';\nimport TaskBar from '../../component/molecules/TaskBar';\nimport { Task } from '../../Data/data';\nimport SaveButton from '../../component/atoms/SaveButton';\n// import SaveButton from '../../component/atoms/SaveButton';\n\n/* ---------タスクリスト本体のコンポーネント--------- */\n\n/* ----------タスクの型定義---------- */\n\ntype Props = {\n  add?: (id: number, taskName: string) => void;\n  del?: (index: number) => void;\n  edit?: () => void;\n  refresh?: (list: Task[]) => void;\n};\n/* -------------------------------- */\n\nconst TaskList: VFC<Props> = ({\n  add = () => undefined,\n  del = () => undefined,\n  edit = () => undefined,\n  refresh = () => undefined,\n}) => {\n  /* ------------Store,Reducerに関する処理------------ */\n  // Storeに格納してあるタスクリストの本体\n  const taskListState = useSelector<RootState, Task[]>(\n    (state: RootState) => state.taskList,\n  );\n\n  // dispatcher\n  const dispatch = useDispatch();\n\n  /* --------状態(state)の定義------------- */\n\n  // タスク名\n  const [taskName, setTaskName] = useState<string>('');\n  // タスクのid\n  const [idCnt, setIdCnt] = useState(\n    taskListState.length > 0\n      ? taskListState[taskListState.length - 1].id + 1\n      : 0,\n  );\n  // 追加ボタンの活性制御\n  const [disabled, setDisabled] = useState(true);\n\n  /* ------------タスクの追加に関する処理------------ */\n  // ---タスクの追加\n  const addTask = () => {\n    const newIdCnt = idCnt + 1;\n    setIdCnt(newIdCnt);\n    // call reducer\n    dispatch(add(newIdCnt, taskName));\n\n    // 入力された値をクリアーする\n    setTaskName('');\n    setDisabled(true);\n  };\n\n  /* ------------入力フォームに関する処理------------ */\n  // 入力フォームの入力を受付けるための処理\n  const handleValue = (target: HTMLInputElement) => {\n    // 35文字以上の入力はタスクからはみ出てしまうので受け付けない\n    if (target.value.length > 35) {\n      return;\n    }\n    setTaskName(target !== null ? target.value : '');\n    setDisabled(!(target.value.length > 0));\n  };\n\n  /* ------------タスクのリセットに関する処理------------ */\n\n  // ---全てのタスクのリセット\n  const reset = () => {\n    // eslint-disable-next-line no-alert\n    const confirmAnswer = window.confirm('Do you wanna delete All Task ?');\n    // キャンセルされた場合はリセットを中断\n    if (!confirmAnswer) {\n      return;\n    }\n\n    // setTask([]);\n    dispatch(refresh([]));\n  };\n\n  /* ------タスクをドラッグ&ドロップでソート可能にするための関数------ */\n\n  const onDrop = (dropResult: DropResult) => {\n    // `DropResult` で型定義\n    const { removedIndex, addedIndex } = dropResult;\n    // setTask((tasksArray) =>\n    //   arrayMove(tasksArray, removedIndex || 0, addedIndex || 0),\n\n    let newTaskListState = [...taskListState];\n    newTaskListState = arrayMove(\n      newTaskListState,\n      removedIndex || 0,\n      addedIndex || 0,\n    );\n    dispatch(refresh(newTaskListState));\n  };\n\n  /* ------------------------------------------------------ */\n\n  return (\n    <>\n      <div className=\"task-list-container\">\n        <InputForm\n          inputValue={taskName}\n          placeholder=\"Enter any task that you have to do.\"\n          onChangeHandler={(e) => handleValue(e.target)}\n        />\n        <AddButton addTask={addTask} disabled={disabled} />\n        <ResetButton reset={reset} />\n        <SaveButton />\n\n        <Item.Group>\n          <Container\n            drag-handle-selector=\".drag-handle-selector\"\n            lockAxis=\"y\"\n            onDrop={onDrop}\n          >\n            {taskListState.map((task, index) => (\n              <Draggable key={task.id}>\n                <TaskBar\n                  targetTask={task}\n                  index={index}\n                  del={del}\n                  edit={edit}\n                  refresh={refresh}\n                />\n              </Draggable>\n            ))}\n          </Container>\n        </Item.Group>\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----操作方法を紹介するためのコンポーネント（ソート用）----- */\n\nconst IntroductionEdit: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space-edit')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space-edit\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default IntroductionEdit;\n","import { Task } from './Data/data';\n\n// * -------------------Common--------------------- * //\ntype ValueOf<T> = T[keyof T];\n\n// * -------------------TaskList--------------------- * //\nexport const TaskListActionType = {\n  ADD: 'ADD',\n  DELETE: 'DELETE',\n  EDIT: 'EDIT',\n  REFRESH: 'REFRESH',\n} as const;\n\nexport type TaskListAction = {\n  type: ValueOf<typeof TaskListActionType>;\n  id?: number;\n  taskName?: string;\n  index?: number;\n  list?: Task[];\n};\n\nexport const addTask = (id: number, taskName: string): TaskListAction => ({\n  type: TaskListActionType.ADD,\n  id,\n  taskName,\n});\n\nexport const deleteTask = (deleteIndex: number): TaskListAction => ({\n  type: TaskListActionType.DELETE,\n  index: deleteIndex,\n});\n\nexport const editTask = (): TaskListAction => ({\n  type: TaskListActionType.EDIT,\n});\n\nexport const refreshTask = (refreshTaskList: Task[]): TaskListAction => ({\n  type: TaskListActionType.REFRESH,\n  list: refreshTaskList,\n});\n\n// * -------------------LoginUser--------------------- * //\nexport const LoginUserActionType = {\n  SET: 'SET',\n} as const;\n\nexport type LoginUserAction = {\n  type: ValueOf<typeof LoginUserActionType>;\n  loginUserName: string;\n};\n\nexport const setLoginUser = (loginUser: string): LoginUserAction => ({\n  type: LoginUserActionType.SET,\n  loginUserName: loginUser,\n});\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----操作方法を紹介するためのコンポーネント（アップデート処理用）----- */\n\nconst Introduction: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Introduction;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst SignInButton: VFC = () => (\n  <>\n    <Link to=\"/DragAndDrop-TaskList/signIn\">\n      <Button className=\"controlItem sign-in-button\" color=\"linkedin\">\n        Sign In\n      </Button>\n    </Link>\n  </>\n);\n\nexport default SignInButton;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst SignUpButton: VFC = () => (\n  <>\n    <Link to=\"/DragAndDrop-TaskList/signUp\">\n      <Button className=\"controlItem sign-up-button\" color=\"green\">\n        Sign Up\n      </Button>\n    </Link>\n  </>\n);\n\nexport default SignUpButton;\n","import { VFC } from 'react';\nimport { useSelector } from 'react-redux';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport TaskList from '../../container/templates/TaskList';\nimport IntroductionEdit from '../atoms/IntoductionEdit';\nimport { addTask, deleteTask, editTask, refreshTask } from '../../actions';\nimport Introduction from '../atoms/Intoduction';\nimport SignInButton from '../atoms/SignInButton';\nimport SignUpButton from '../atoms/SignUpButton';\nimport { RootState } from '../../reducer';\n\n/* ----- 表示するページの本体 ------ */\nconst Home: VFC = () => {\n  const loginUserState = useSelector<RootState, string>(\n    (state: RootState) => state.loginUser,\n  );\n\n  return (\n    <>\n      {loginUserState === 'default' ? (\n        <ApplicationHeader\n          signIn={<SignInButton />}\n          signUp={<SignUpButton />}\n        />\n      ) : (\n        <ApplicationHeader />\n      )}\n      <IntroductionEdit />\n      <TaskList\n        add={addTask}\n        del={deleteTask}\n        edit={editTask}\n        refresh={refreshTask}\n      />\n      <Introduction />\n    </>\n  );\n};\n\nexport default Home;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst BackToHomeButton: VFC = () => (\n  <>\n    <Link to=\"/DragAndDrop-TaskList/\">\n      <Button className=\"controlItem sign-up-button\" color=\"black\">\n        Home\n      </Button>\n    </Link>\n  </>\n);\n\nexport default BackToHomeButton;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { VFC, useState, useEffect } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Redirect } from 'react-router';\nimport { Spinner } from 'react-activity';\nimport { useDispatch } from 'react-redux';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport InputForm from '../atoms/InputForm';\nimport { Task, UserInfo } from '../../Data/data';\nimport BackToHomeButton from '../atoms/BackToHomeButton';\nimport { refreshTask, setLoginUser } from '../../actions';\n\nconst SignInPage: VFC = () => {\n  const [userName, setUserName] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [redirectToHome, setRedirectToHome] = useState(false);\n  const [errorMsgCode, setErrorMsgCode] = useState('');\n  const dispatch = useDispatch();\n\n  /* ------------入力フォームに関する処理------------ */\n  // 入力フォームの入力を受付けるための処理\n  const handleUserName = (target: HTMLInputElement) => {\n    setUserName(target !== null ? target.value : '');\n  };\n\n  const handlePassword = (target: HTMLInputElement) => {\n    // パスワードは8文字までとする\n    if (target.value.length > 8) {\n      return;\n    }\n    setPassword(target !== null ? target.value : '');\n  };\n  /* ------------------------------------------ */\n\n  /* ------------非同期通信に関する処理------------ */\n  //   const url = 'http://localhost:5000/api/users/signIn';\n  //   const url =\n  //     'https://draganddroptasklist-env.eba-btryk2uf.ap-northeast-1.elasticbeanstalk.com/api/users/signIn';\n  const url = 'https://omojuproduct.link/api/users/signIn';\n\n  const [signal, setSignal] = useState(0);\n\n  const onSignUp = () => {\n    setSignal(signal + 1);\n  };\n\n  useEffect(() => {\n    async function signUp() {\n      const postData: UserInfo = { userName, password };\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(postData),\n      };\n\n      setIsLoading(true);\n      await fetch(url, requestOptions)\n        .then((res) => res.json())\n        .then((result: string[]) => {\n          if (result.length > 0) {\n            const loginUserData: string[] = result;\n            const refreshTarget: Task[] = [];\n            loginUserData.forEach((data, index) => {\n              refreshTarget.push({\n                id: index,\n                title: data,\n                mode: 'display',\n              });\n            });\n\n            // ログインユーザーを設定\n            dispatch(setLoginUser(userName));\n            dispatch(refreshTask(refreshTarget));\n            setRedirectToHome(true);\n          } else {\n            setErrorMsgCode('ErrorCode:003');\n            setRedirectToHome(false);\n          }\n        });\n    }\n    // Sign Upボタンを押下した時にだけ非同期通信を実行。\n    if (signal > 0) {\n      setErrorMsgCode('');\n      void signUp();\n      setIsLoading(false);\n    }\n    setSignal(0);\n  }, [signal, userName, password, dispatch]);\n\n  return (\n    <>\n      <ApplicationHeader signUp={<BackToHomeButton />} />\n      <div className=\"sign-in-space\">\n        <h1>Sign In</h1>\n        <InputForm\n          inputValue={userName}\n          placeholder=\"userName\"\n          onChangeHandler={(e) => handleUserName(e.target)}\n        />\n        <InputForm\n          inputValue={password}\n          placeholder=\"password\"\n          onChangeHandler={(e) => handlePassword(e.target)}\n        />\n        <Button color=\"linkedin\" onClick={() => onSignUp()}>\n          Sign In\n        </Button>\n        {errorMsgCode === 'ErrorCode:003' ? (\n          <>\n            <p>サインインに失敗しました😭</p>\n            <p>ユーザー名とパスワードを確認してください</p>\n          </>\n        ) : null}\n      </div>\n      {redirectToHome ? <Redirect to=\"/DragAndDrop-TaskList\" /> : null}\n      {isLoading ? (\n        <Spinner color=\"#727981\" size={32} speed={1} animating />\n      ) : null}\n    </>\n  );\n};\n\nexport default SignInPage;\n","import { combineReducers, Reducer } from 'redux';\nimport { LoginUserAction, TaskListAction } from './actions';\nimport { Task } from './Data/data';\n\n// * -------------------TaskList--------------------- * //\nexport type TaskListState = Task[];\nexport const initialState: TaskListState = [\n  {\n    id: 0,\n    title: 'You can Add tasks, Delete, and Sort.',\n    mode: 'display',\n  },\n  {\n    id: 1,\n    title: 'Happy Tasking!',\n    mode: 'display',\n  },\n  {\n    id: 2,\n    title: '👌',\n    mode: 'display',\n  },\n];\n\nexport const taskListReducer: Reducer<TaskListState, TaskListAction> = (\n  state: TaskListState = initialState,\n  action: TaskListAction,\n): TaskListState => {\n  let newTaskList = null;\n  switch (action.type) {\n    case 'ADD':\n      return [\n        ...state,\n        {\n          id: action.id || 0,\n          title: action.taskName || '',\n          mode: 'display',\n        },\n      ];\n    case 'DELETE':\n      newTaskList = [...state];\n      newTaskList.splice(action.index || 0, 1);\n\n      return newTaskList;\n    case 'EDIT':\n      return [...state];\n\n    case 'REFRESH':\n      return action.list || [];\n\n    default: {\n      const _: never = action.type;\n\n      return state;\n    }\n  }\n};\n\n// * -------------------LoginUser--------------------- * //\nexport type LoginUserState = string;\nexport const loginUserReducer: Reducer<LoginUserState, LoginUserAction> = (\n  state: LoginUserState = 'default',\n  action: LoginUserAction,\n): LoginUserState => {\n  switch (action.type) {\n    case 'SET':\n      return action.loginUserName;\n    default: {\n      const _: never = action.type;\n\n      return state;\n    }\n  }\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  taskList: taskListReducer,\n  loginUser: loginUserReducer,\n});\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { VFC, useState, useEffect } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Redirect } from 'react-router';\nimport { Spinner } from 'react-activity';\nimport { useDispatch } from 'react-redux';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport InputForm from '../atoms/InputForm';\nimport { UserInfo } from '../../Data/data';\nimport BackToHomeButton from '../atoms/BackToHomeButton';\nimport { refreshTask, setLoginUser } from '../../actions';\nimport { initialState } from '../../reducer';\n\nconst SignUpPage: VFC = () => {\n  const [userName, setUserName] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [redirectToHome, setRedirectToHome] = useState(false);\n  const [errorMsgCode, setErrorMsgCode] = useState('');\n  const dispatch = useDispatch();\n\n  /* ------------入力フォームに関する処理------------ */\n  // 入力フォームの入力を受付けるための処理\n  const handleUserName = (target: HTMLInputElement) => {\n    setUserName(target !== null ? target.value : '');\n  };\n\n  const handlePassword = (target: HTMLInputElement) => {\n    // パスワードは8文字までとする\n    if (target.value.length > 8) {\n      return;\n    }\n    setPassword(target !== null ? target.value : '');\n  };\n  /* ------------------------------------------ */\n\n  /* ------------非同期通信に関する処理------------ */\n  //   const url = 'http://localhost:5000/api/users/signUp';\n  //   const url =\n  //     'https://draganddroptasklist-env.eba-btryk2uf.ap-northeast-1.elasticbeanstalk.com/api/users/signUp';\n  const url = 'https://omojuproduct.link/api/users/signUp';\n\n  const [signal, setSignal] = useState(0);\n\n  const onSignUp = () => {\n    setSignal(signal + 1);\n  };\n\n  useEffect(() => {\n    async function signUp() {\n      const postData: UserInfo = { userName, password };\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(postData),\n      };\n\n      setIsLoading(true);\n      await fetch(url, requestOptions)\n        .then((res) => res.json())\n        .then((result) => {\n          if (result === true) {\n            // ログインユーザーを設定\n            dispatch(setLoginUser(userName));\n            dispatch(refreshTask(initialState));\n            setRedirectToHome(true);\n          } else if (result === 'ErrorCode:001') {\n            setErrorMsgCode('ErrorCode:001');\n            setRedirectToHome(false);\n          }\n        });\n    }\n    // Sign Upボタンを押下した時にだけ非同期通信を実行。\n    if (signal > 0) {\n      setErrorMsgCode('');\n      if (userName.length === 0 || password.length === 0) {\n        setErrorMsgCode('ErrorCode:002');\n      }\n      void signUp();\n      setIsLoading(false);\n    }\n    setSignal(0);\n  }, [signal, userName, password, dispatch]);\n\n  return (\n    <>\n      <ApplicationHeader signUp={<BackToHomeButton />} />\n      <div className=\"sign-in-space\">\n        <h1>Sign Up</h1>\n        <InputForm\n          inputValue={userName}\n          placeholder=\"userName\"\n          onChangeHandler={(e) => handleUserName(e.target)}\n        />\n        <InputForm\n          inputValue={password}\n          placeholder=\"password\"\n          onChangeHandler={(e) => handlePassword(e.target)}\n        />\n        <Button color=\"green\" onClick={() => onSignUp()}>\n          Sign Up\n        </Button>\n        {errorMsgCode === 'ErrorCode:001' ? (\n          <p>既に同じ名前とパスワードの\bユーザーが存在します😥</p>\n        ) : null}\n        {errorMsgCode === 'ErrorCode:002' ? (\n          <p>ユーザー名とパスワードは1文字以上入力してください😣</p>\n        ) : null}\n      </div>\n      {redirectToHome ? <Redirect to=\"/DragAndDrop-TaskList\" /> : null}\n      {isLoading ? (\n        <Spinner color=\"#727981\" size={32} speed={1} animating />\n      ) : null}\n    </>\n  );\n};\n\nexport default SignUpPage;\n","import { VFC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Route, Switch } from 'react-router';\nimport Home from './component/pages/Home';\nimport './App.css';\nimport SignInPage from './component/pages/SignInPage';\nimport SignUpPage from './component/pages/SignUpPage';\n\nconst App: VFC = () => (\n  <>\n    <Helmet>\n      <style>{'body { background-color: #F4EFE3; }'}</style>\n    </Helmet>\n    <Switch>\n      <Route exact path=\"/DragAndDrop-TaskList\">\n        <Home />\n      </Route>\n      <Route path=\"/DragAndDrop-TaskList/signIn\">\n        <SignInPage />\n      </Route>\n      <Route path=\"/DragAndDrop-TaskList/signUp\">\n        <SignUpPage />\n      </Route>\n    </Switch>\n  </>\n);\nexport default App;\n","/* eslint @typescript-eslint/explicit-module-boundary-types: 0 */\n/* eslint no-console: 0 */\nimport { ReportHandler } from 'web-vitals';\n\ntype Error = {\n  message: string;\n};\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((error: Error) => {\n        console.log(error.message);\n      });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { rootReducer } from './reducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}