{"version":3,"sources":["component/templates/ApplicationHeader.tsx","component/atoms/ResetButton.tsx","component/atoms/AddButton.tsx","component/atoms/InputForm.tsx","component/atoms/Intoduction.tsx","component/templates/TaskList.tsx","component/pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApplicationHeader","className","ResetButton","reset","Button","color","onClick","AddButton","addTask","disabled","InputForm","taskName","onChangeHandler","type","placeholder","value","onChange","Introduction","document","querySelector","classList","toggle","vanishIntroduction","TaskList","useState","setTaskName","idCnt","setIdCnt","setDisabled","id","title","mode","tasks","setTask","editTask","setEditTask","toggleInvalidControlTarget","targetList","getElementsByClassName","Array","prototype","slice","call","forEach","target","e","length","newIdCnt","window","confirm","Item","Group","dragHandleSelector","lockAxis","onDrop","dropResult","removedIndex","addedIndex","tasksArray","arrayMove","map","task","index","Content","Icon","name","size","newEditTask","handleTaskTitle","onKeyPress","key","foundEditTask","find","undefined","newTasks","indexOf","onEnterForCompleteEdit","Header","onDoubleClick","filter","t","editTaskTitle","splice","deleteTask","Home","App","Helmet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","error","console","log","message","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6e80a63c.chunk.js","sourcesContent":["import { VFC } from 'react';\n\nconst ApplicationHeader: VFC = () => (\n  <>\n    <header className=\"site-header\">\n      <div className=\"wrapper\">\n        <div className=\"site-header-inner\">\n          <h1>Drag & Drop TaskList</h1>\n        </div>\n      </div>\n    </header>\n  </>\n);\n\nexport default ApplicationHeader;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\ntype Props = {\n  reset: () => void;\n};\n\nconst ResetButton: VFC<Props> = ({ reset }) => (\n  <Button className=\"controlItem\" color=\"google plus\" onClick={reset}>\n    Reset\n  </Button>\n);\n\nexport default ResetButton;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\ntype Props = {\n  addTask: () => void;\n  disabled: boolean;\n};\n\nconst AddButton: VFC<Props> = ({ addTask, disabled }) => (\n  <Button\n    className=\"controlItem\"\n    color=\"olive\"\n    onClick={addTask}\n    disabled={disabled}\n  >\n    +\n  </Button>\n);\n\nexport default AddButton;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint @typescript-eslint/no-explicit-any: 0 */\nimport { VFC } from 'react';\n\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\ntype Props = {\n  taskName: string;\n  onChangeHandler: (target: any) => void;\n};\n\nconst InputForm: VFC<Props> = ({ taskName, onChangeHandler }) => (\n  <input\n    type=\"text\"\n    placeholder=\"Enter any task that you have to do.\"\n    className=\"inputForm controlItem\"\n    value={taskName}\n    onChange={onChangeHandler}\n  />\n);\n\nexport default InputForm;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\nconst Introduction: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Introduction;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint no-alert: 0 */\n/* eslint @typescript-eslint/no-unsafe-call: 0 */\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\nimport { useState, VFC } from 'react';\nimport { Item, Icon, Button } from 'semantic-ui-react';\nimport { Container, Draggable, DropResult } from 'react-smooth-dnd';\nimport arrayMove from 'array-move';\nimport ResetButton from '../atoms/ResetButton';\nimport AddButton from '../atoms/AddButton';\nimport InputForm from '../atoms/InputForm';\nimport Introduction from '../atoms/Intoduction';\n\n// タスクの型定義\nexport type Task = {\n  id: number;\n  title: string;\n  mode: string;\n};\n\nconst TaskList: VFC = () => {\n  // ------------------------------------\n  // stateの制御\n\n  // タスク名\n  const [taskName, setTaskName] = useState<string>('');\n  // タスクのid\n  const [idCnt, setIdCnt] = useState(1);\n  // 追加ボタンの非活性\n  const [disabled, setDisabled] = useState(true);\n  // タスクのリスト\n  const [tasks, setTask] = useState<Task[]>([\n    {\n      id: idCnt,\n      title: 'You can Add tasks, Delete, and Sort.',\n      mode: 'display',\n    },\n    {\n      id: 999999998,\n      title: 'Happy Tasking!',\n      mode: 'display',\n    },\n    {\n      id: 999999999,\n      title: '👌',\n      mode: 'display',\n    },\n  ]);\n\n  // 編集用タスクオブジェクト\n  const [editTask, setEditTask] = useState<Task>({\n    id: 0,\n    title: '',\n    mode: '',\n  });\n\n  // ------------------------------------\n  // stateの操作用関数の定義\n\n  // ---タスクの追加\n  const addTask = () => {\n    const newIdCnt = idCnt + 1;\n    setIdCnt(newIdCnt);\n    setTask([\n      ...tasks,\n      {\n        id: newIdCnt,\n        title: taskName,\n        mode: 'display',\n      },\n    ]);\n\n    // 入力された値をクリアーする\n    setTaskName('');\n    setDisabled(true);\n  };\n\n  // ---タスクの削除\n  const deleteTask = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTask(newTasks);\n  };\n\n  // ---全てのタスクのリセット\n  const reset = () => {\n    const confirmAnswer = window.confirm('Do you wanna delete All Task ?');\n    // キャンセルされた場合はリセットを中断\n    if (!confirmAnswer) {\n      return;\n    }\n\n    setTask([]);\n  };\n\n  // ---タスクのタイトルの入力をフォームで受け付けるための関数\n  const handleValue = (target: HTMLInputElement) => {\n    // 35文字以上の入力はタスクからはみ出てしまうので受け付けない\n    if (target.value.length > 35) {\n      return;\n    }\n    setTaskName(target !== null ? target.value : '');\n    setDisabled(!(target.value.length > 0));\n  };\n\n  // ---タスクをドラッグ&ドロップでソート可能にするための関数\n  const onDrop = (dropResult: DropResult) => {\n    // `DropResult` で型定義\n    const { removedIndex, addedIndex } = dropResult;\n    setTask((tasksArray) =>\n      arrayMove(tasksArray, removedIndex || 0, addedIndex || 0),\n    );\n  };\n\n  const toggleInvalidControlTarget = () => {\n    const targetList = document.getElementsByClassName('controlItem');\n    const tempTargetList = Array.prototype.slice.call(targetList);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    tempTargetList.forEach((target) => target.classList.toggle('eventInvalid'));\n  };\n\n  const editTaskTitle = (task: Task) => {\n    if (tasks.filter((t) => t.mode === 'edit').length > 0) {\n      return;\n    }\n    const tempTask = task;\n    tempTask.mode = 'edit';\n\n    // タスクのリストを更新して再レンダリングさせる\n    setTask([...tasks]);\n    // 編集用タスクに引数のタスクをセットして編集可能にする\n    setEditTask(task);\n    toggleInvalidControlTarget();\n  };\n\n  const handleTaskTitle = (target: HTMLInputElement) => {\n    // タスクのタイトルを編集する\n    const newEditTask = { ...editTask };\n    newEditTask.title = target.value;\n    setEditTask(newEditTask);\n  };\n\n  const onEnterForCompleteEdit = (key: string) => {\n    if (key === 'Enter') {\n      // タスクリストの配列を最新化する\n      const foundEditTask = tasks.find((task: Task) => task.mode === 'edit');\n      if (foundEditTask === undefined) {\n        return;\n      }\n      const newTasks = [...tasks];\n      editTask.mode = 'display';\n      newTasks[newTasks.indexOf(foundEditTask)] = editTask;\n      setTask(newTasks);\n      toggleInvalidControlTarget();\n    }\n  };\n\n  // useEffect(() => {\n  //   document.addEventListener('mousedown', (e) => {\n  //     if (e.target === null) {\n  //       return;\n  //     }\n  //     const targetElement = e.target as HTMLElement;\n  //     if (\n  //       !targetElement.closest('.editInputForm') &&\n  //       tasks.filter((task: Task) => task.mode === 'edit').length > 0\n  //     ) {\n  //       const answer = window.confirm('please keydown Enter');\n  //       if (answer) {\n  //         onEnterForCompleteEdit('Enter');\n  //       } else {\n  //         // タスクのモードを元に戻す\n  //       }\n  //     }\n  //   });\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [editTask]);\n\n  return (\n    <>\n      <div className=\"task-list-container\">\n        <InputForm\n          taskName={taskName}\n          onChangeHandler={(e) => handleValue(e.target)}\n        />\n        <AddButton addTask={addTask} disabled={disabled} />\n        <ResetButton reset={reset} />\n\n        <Item.Group>\n          <Container\n            dragHandleSelector=\".dragHandleSelector\"\n            lockAxis=\"y\"\n            onDrop={onDrop}\n          >\n            {tasks.map((task, index) => (\n              <Draggable key={task.id}>\n                <Item key={task.id} className=\"task\">\n                  <Item.Content>\n                    <Icon className=\"taskIcon\" name=\"certificate\" size=\"big\" />\n                    <span className=\"taskNumber\">{index + 1}</span>\n                    {task.mode === 'edit' ? (\n                      <input\n                        className=\"editInputForm\"\n                        type=\"text\"\n                        value={editTask.title}\n                        onChange={(e) => handleTaskTitle(e.target)}\n                        onKeyPress={(e) => onEnterForCompleteEdit(e.key)}\n                      />\n                    ) : (\n                      <Item.Header\n                        className=\"taskHeader\"\n                        onDoubleClick={() => editTaskTitle(task)}\n                      >\n                        {task.title}\n                      </Item.Header>\n                    )}\n                    <Icon\n                      className=\"dragHandleSelector controlItem\"\n                      name=\"sort\"\n                      size=\"big\"\n                    />\n                    <Button\n                      className=\"delete controlItem\"\n                      color=\"yellow\"\n                      size=\"mini\"\n                      onClick={() => deleteTask(index)}\n                    >\n                      ×\n                    </Button>\n                  </Item.Content>\n                </Item>\n              </Draggable>\n            ))}\n          </Container>\n        </Item.Group>\n        <Introduction />\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import { VFC } from 'react';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport TaskList from '../templates/TaskList';\n\nconst Home: VFC = () => (\n  <>\n    <ApplicationHeader />\n    <TaskList />\n  </>\n);\n\nexport default Home;\n","import { VFC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Home from './component/pages/Home';\nimport './App.css';\n\nconst App: VFC = () => (\n  // window.onload = () =>\n  //   window.alert('Welcome! You can manage any task that you have to do!');\n\n  <>\n    <Helmet>\n      <style>{'body { background-color: #F4EFE3; }'}</style>\n    </Helmet>\n    <Home />\n  </>\n);\nexport default App;\n","/* eslint @typescript-eslint/explicit-module-boundary-types: 0 */\n/* eslint no-console: 0 */\nimport { ReportHandler } from 'web-vitals';\n\ntype Error = {\n  message: string;\n};\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((error: Error) => {\n        console.log(error.message);\n      });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}