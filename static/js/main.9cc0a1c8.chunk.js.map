{"version":3,"sources":["component/templates/ApplicationHeader.tsx","component/atoms/ResetButton.tsx","component/atoms/AddButton.tsx","component/atoms/InputForm.tsx","component/atoms/Intoduction.tsx","component/templates/TaskList.tsx","component/atoms/IntoductionEdit.tsx","actions.ts","component/pages/Home.tsx","App.tsx","reportWebVitals.ts","reducer.ts","index.tsx"],"names":["ApplicationHeader","className","ResetButton","reset","Button","color","onClick","AddButton","addTask","disabled","InputForm","taskName","onChangeHandler","type","placeholder","value","onChange","Introduction","document","querySelector","classList","toggle","vanishIntroduction","TaskList","add","del","edit","refresh","useState","setTaskName","idCnt","setIdCnt","setDisabled","id","title","mode","editTask","setEditTask","taskListState","useSelector","state","dispatch","useDispatch","toggleInvalidControlTarget","targetList","getElementsByClassName","Array","prototype","slice","call","forEach","target","e","length","newIdCnt","window","confirm","Item","Group","drag-handle-selector","lockAxis","onDrop","dropResult","removedIndex","addedIndex","newTaskListState","arrayMove","map","task","index","Content","Icon","name","size","newEditTask","handleTaskTitle","onKeyPress","key","foundEditTask","find","undefined","newTasks","indexOf","onEnterForCompleteEdit","Header","onDoubleClick","filter","t","editTaskTitle","IntroductionEdit","TaskListActionType","deleteTask","deleteIndex","refreshTask","refreshTaskList","list","Home","App","Helmet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","error","console","log","message","initialState","store","createStore","action","newTaskList","splice","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9cc0a1c8.chunk.js","sourcesContent":["import { VFC } from 'react';\n\n/* ----- アプリケーション本体のヘッダー ------ */\nconst ApplicationHeader: VFC = () => (\n  <>\n    <header className=\"site-header\">\n      <div className=\"wrapper\">\n        <div className=\"site-header-inner\">\n          <h1>Drag & Drop TaskList</h1>\n        </div>\n      </div>\n    </header>\n  </>\n);\n\nexport default ApplicationHeader;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----タスクを全て削除するためのResetボタン----- */\n\ntype Props = {\n  reset: () => void;\n};\n\nconst ResetButton: VFC<Props> = ({ reset }) => (\n  <Button className=\"controlItem\" color=\"google plus\" onClick={reset}>\n    Reset\n  </Button>\n);\n\nexport default ResetButton;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----タスクの追加ボタンコンポーネント----- */\n\ntype Props = {\n  addTask: () => void;\n  disabled: boolean;\n};\n\nconst AddButton: VFC<Props> = ({ addTask, disabled }) => (\n  <Button\n    className=\"controlItem\"\n    color=\"olive\"\n    onClick={addTask}\n    disabled={disabled}\n  >\n    +\n  </Button>\n);\n\nexport default AddButton;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint @typescript-eslint/no-explicit-any: 0 */\nimport { VFC } from 'react';\n\n/* -----入力フォームのコンポーネント----- */\n\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\ntype Props = {\n  taskName: string;\n  onChangeHandler: (target: any) => void;\n};\n\nconst InputForm: VFC<Props> = ({ taskName, onChangeHandler }) => (\n  <input\n    type=\"text\"\n    placeholder=\"Enter any task that you have to do.\"\n    className=\"input-form controlItem\"\n    value={taskName}\n    onChange={onChangeHandler}\n  />\n);\n\nexport default InputForm;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----操作方法を紹介するためのコンポーネント（アップデート処理用）----- */\n\nconst Introduction: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Introduction;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint no-alert: 0 */\n/* eslint @typescript-eslint/no-unsafe-call: 0 */\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\nimport { useState, VFC } from 'react';\nimport { Item, Icon, Button } from 'semantic-ui-react';\nimport { Container, Draggable, DropResult } from 'react-smooth-dnd';\nimport arrayMove from 'array-move';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ResetButton from '../atoms/ResetButton';\nimport AddButton from '../atoms/AddButton';\nimport InputForm from '../atoms/InputForm';\nimport Introduction from '../atoms/Intoduction';\n// eslint-disable-next-line import/no-cycle\nimport { TaskListState } from '../../reducer';\n\n/* ---------タスクリスト本体のコンポーネント--------- */\n\n/* ----------タスクの型定義---------- */\nexport type Task = {\n  id: number;\n  title: string;\n  mode: string;\n};\n\ntype Props = {\n  add?: (id: number, taskName: string) => void;\n  del?: (index: number) => void;\n  edit?: () => void;\n  refresh?: (list: Task[]) => void;\n};\n/* -------------------------------- */\n\nconst TaskList: VFC<Props> = ({\n  add = () => undefined,\n  del = () => undefined,\n  edit = () => undefined,\n  refresh = () => undefined,\n}) => {\n  /* --------状態(state)の定義------------- */\n\n  // タスク名\n  const [taskName, setTaskName] = useState<string>('');\n  // タスクのid\n  const [idCnt, setIdCnt] = useState(1);\n  // 追加ボタンの活性制御\n  const [disabled, setDisabled] = useState(true);\n\n  // タスクを編集可能にするためのオブジェクト\n  const [editTask, setEditTask] = useState<Task>({\n    id: 0,\n    title: '',\n    mode: '',\n  });\n\n  /* ------------Store,Reducerに関する------------ */\n  // Storeに格納してあるタスクリストの本体\n  const taskListState = useSelector<TaskListState, Task[]>((state) => state);\n\n  // dispatcher\n  const dispatch = useDispatch();\n\n  /* ------------タスクの追加に関する処理------------ */\n  // ---タスクの追加\n  const addTask = () => {\n    const newIdCnt = idCnt + 1;\n    setIdCnt(newIdCnt);\n    // call reducer\n    dispatch(add(newIdCnt, taskName));\n\n    // 入力された値をクリアーする\n    setTaskName('');\n    setDisabled(true);\n  };\n\n  /* ------------入力フォームに関する処理------------ */\n  // 入力フォームの入力を受付けるための処理\n  const handleValue = (target: HTMLInputElement) => {\n    // 35文字以上の入力はタスクからはみ出てしまうので受け付けない\n    if (target.value.length > 35) {\n      return;\n    }\n    setTaskName(target !== null ? target.value : '');\n    setDisabled(!(target.value.length > 0));\n  };\n\n  /* ------------タスクの削除に関する処理------------ */\n\n  // ---全てのタスクのリセット\n  const reset = () => {\n    const confirmAnswer = window.confirm('Do you wanna delete All Task ?');\n    // キャンセルされた場合はリセットを中断\n    if (!confirmAnswer) {\n      return;\n    }\n\n    // setTask([]);\n    dispatch(refresh([]));\n  };\n\n  /* ------タスクをドラッグ&ドロップでソート可能にするための関数------ */\n\n  const onDrop = (dropResult: DropResult) => {\n    // `DropResult` で型定義\n    const { removedIndex, addedIndex } = dropResult;\n    // setTask((tasksArray) =>\n    //   arrayMove(tasksArray, removedIndex || 0, addedIndex || 0),\n\n    let newTaskListState = [...taskListState];\n    newTaskListState = arrayMove(\n      newTaskListState,\n      removedIndex || 0,\n      addedIndex || 0,\n    );\n    dispatch(refresh(newTaskListState));\n  };\n\n  /* ------------タスクのUpdateに関する処理------------ */\n\n  // タスクの編集中に他のコントロールを操作できないようにする処理\n  const toggleInvalidControlTarget = () => {\n    const targetList = document.getElementsByClassName('controlItem');\n    const tempTargetList = Array.prototype.slice.call(targetList);\n\n    tempTargetList.forEach((target) =>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      target.classList.toggle('event-invalid'),\n    );\n  };\n\n  // 編集用タスクに引数のタスクをセットして編集可能にする処理\n  const editTaskTitle = (task: Task) => {\n    if (taskListState.filter((t) => t.mode === 'edit').length > 0) {\n      return;\n    }\n    const tempTask = task;\n    tempTask.mode = 'edit';\n\n    // タスクのリストを更新して再レンダリングさせる\n    // call reducer\n    dispatch(edit());\n    setEditTask(task);\n    toggleInvalidControlTarget();\n  };\n\n  // タスクの内容を編集する処理\n  const handleTaskTitle = (target: HTMLInputElement) => {\n    const newEditTask = { ...editTask };\n    newEditTask.title = target.value;\n    setEditTask(newEditTask);\n  };\n\n  // タスクの編集を完了する処理\n  const onEnterForCompleteEdit = (key: string) => {\n    if (key === 'Enter') {\n      // タスクリストの配列を最新化する\n      const foundEditTask = taskListState.find(\n        (task: Task) => task.mode === 'edit',\n      );\n      if (foundEditTask === undefined) {\n        return;\n      }\n      const newTasks = [...taskListState];\n      editTask.mode = 'display';\n      newTasks[newTasks.indexOf(foundEditTask)] = editTask;\n      // call reducer\n      dispatch(refresh(newTasks));\n      toggleInvalidControlTarget();\n    }\n  };\n\n  /* ------------------------------------------------------ */\n\n  return (\n    <>\n      <div className=\"task-list-container\">\n        <InputForm\n          taskName={taskName}\n          onChangeHandler={(e) => handleValue(e.target)}\n        />\n        <AddButton addTask={addTask} disabled={disabled} />\n        <ResetButton reset={reset} />\n\n        <Item.Group>\n          <Container\n            drag-handle-selector=\".drag-handle-selector\"\n            lockAxis=\"y\"\n            onDrop={onDrop}\n          >\n            {taskListState.map((task, index) => (\n              <Draggable key={task.id}>\n                <Item key={task.id} className=\"task\">\n                  <Item.Content>\n                    <Icon className=\"task-icon\" name=\"certificate\" size=\"big\" />\n                    <span className=\"task-number\">{index + 1}</span>\n                    {task.mode === 'edit' ? (\n                      <input\n                        className=\"edit-input-form\"\n                        type=\"text\"\n                        value={editTask.title}\n                        onChange={(e) => handleTaskTitle(e.target)}\n                        onKeyPress={(e) => onEnterForCompleteEdit(e.key)}\n                      />\n                    ) : (\n                      <Item.Header\n                        className=\"task-header\"\n                        onDoubleClick={() => editTaskTitle(task)}\n                      >\n                        {task.title}\n                      </Item.Header>\n                    )}\n                    <Icon\n                      className=\"drag-handle-selector controlItem\"\n                      name=\"sort\"\n                      size=\"big\"\n                    />\n                    <Button\n                      className=\"delete controlItem\"\n                      color=\"yellow\"\n                      size=\"mini\"\n                      onClick={() => dispatch(del(index))}\n                    >\n                      ×\n                    </Button>\n                  </Item.Content>\n                </Item>\n              </Draggable>\n            ))}\n          </Container>\n        </Item.Group>\n        <Introduction />\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\n/* -----操作方法を紹介するためのコンポーネント（ソート用）----- */\n\nconst IntroductionEdit: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space-edit')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space-edit\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default IntroductionEdit;\n","// eslint-disable-next-line import/no-cycle\nimport { Task } from './component/templates/TaskList';\n\nexport const TaskListActionType = {\n  ADD: 'ADD',\n  DELETE: 'DELETE',\n  EDIT: 'EDIT',\n  REFRESH: 'REFRESH',\n} as const;\n\ntype ValueOf<T> = T[keyof T];\n\nexport type TaskListAction = {\n  type: ValueOf<typeof TaskListActionType>;\n  id?: number;\n  taskName?: string;\n  index?: number;\n  list?: Task[];\n};\n\nexport const addTask = (id: number, taskName: string): TaskListAction => ({\n  type: TaskListActionType.ADD,\n  id,\n  taskName,\n});\n\nexport const deleteTask = (deleteIndex: number): TaskListAction => ({\n  type: TaskListActionType.DELETE,\n  index: deleteIndex,\n});\n\nexport const editTask = (): TaskListAction => ({\n  type: TaskListActionType.EDIT,\n});\n\nexport const refreshTask = (refreshTaskList: Task[]): TaskListAction => ({\n  type: TaskListActionType.REFRESH,\n  list: refreshTaskList,\n});\n","import { VFC } from 'react';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport TaskList from '../templates/TaskList';\nimport IntroductionEdit from '../atoms/IntoductionEdit';\nimport { addTask, deleteTask, editTask, refreshTask } from '../../actions';\n\n/* ----- 表示するページの本体 ------ */\nconst Home: VFC = () => (\n  <>\n    <ApplicationHeader />\n    <IntroductionEdit />\n    <TaskList\n      add={addTask}\n      del={deleteTask}\n      edit={editTask}\n      refresh={refreshTask}\n    />\n  </>\n);\n\nexport default Home;\n","import { VFC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Home from './component/pages/Home';\nimport './App.css';\n\nconst App: VFC = () => (\n  <>\n    <Helmet>\n      <style>{'body { background-color: #F4EFE3; }'}</style>\n    </Helmet>\n    <Home />\n  </>\n);\nexport default App;\n","/* eslint @typescript-eslint/explicit-module-boundary-types: 0 */\n/* eslint no-console: 0 */\nimport { ReportHandler } from 'web-vitals';\n\ntype Error = {\n  message: string;\n};\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((error: Error) => {\n        console.log(error.message);\n      });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-cycle */\nimport { Reducer } from 'redux';\nimport { TaskListAction } from './actions';\nimport { Task } from './component/templates/TaskList';\n\nexport type TaskListState = Task[];\nexport const initialState: TaskListState = [\n  {\n    id: 0,\n    title: 'You can Add tasks, Delete, and Sort.',\n    mode: 'display',\n  },\n  {\n    id: 99998,\n    title: 'Happy Tasking!',\n    mode: 'display',\n  },\n  {\n    id: 99999,\n    title: '👌',\n    mode: 'display',\n  },\n];\n\nexport const taskListReducer: Reducer<TaskListState, TaskListAction> = (\n  state: TaskListState = initialState,\n  action: TaskListAction,\n): TaskListState => {\n  let newTaskList = null;\n  switch (action.type) {\n    case 'ADD':\n      return [\n        ...state,\n        {\n          id: action.id || 0,\n          title: action.taskName || '',\n          mode: 'display',\n        },\n      ];\n    case 'DELETE':\n      newTaskList = [...state];\n      newTaskList.splice(action.index || 0, 1);\n\n      return newTaskList;\n    case 'EDIT':\n      return [...state];\n\n    case 'REFRESH':\n      return action.list || [];\n\n    default: {\n      const _: never = action.type;\n\n      return state;\n    }\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { initialState, taskListReducer } from './reducer';\n\nconst store = createStore(taskListReducer, initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}