{"version":3,"sources":["component/templates/ApplicationHeader.tsx","component/atoms/ResetButton.tsx","component/atoms/AddButton.tsx","component/atoms/InputForm.tsx","component/atoms/Intoduction.tsx","component/templates/TaskList.tsx","component/pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ApplicationHeader","className","ResetButton","reset","Button","color","onClick","AddButton","addTask","disabled","InputForm","taskName","onChangeHandler","type","placeholder","value","onChange","Introduction","document","querySelector","classList","toggle","vanishIntroduction","TaskList","useState","setTaskName","idCnt","setIdCnt","setDisabled","id","title","tasks","setTask","e","target","length","newIdCnt","window","confirm","Item","Group","dragHandleSelector","lockAxis","onDrop","dropResult","removedIndex","addedIndex","tasksArray","arrayMove","map","task","index","Content","Icon","name","size","Header","newTasks","splice","deleteTask","Home","App","Helmet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","error","console","log","message","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c8a6a816.chunk.js","sourcesContent":["import { VFC } from 'react';\n\nconst ApplicationHeader: VFC = () => (\n  <>\n    <header className=\"site-header\">\n      <div className=\"wrapper\">\n        <div className=\"site-header-inner\">\n          <h1>Drag & Drop TaskList</h1>\n        </div>\n      </div>\n    </header>\n  </>\n);\n\nexport default ApplicationHeader;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\ntype Props = {\n  reset: () => void;\n};\n\nconst ResetButton: VFC<Props> = ({ reset }) => (\n  <Button color=\"google plus\" onClick={reset}>\n    Reset\n  </Button>\n);\n\nexport default ResetButton;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\ntype Props = {\n  addTask: () => void;\n  disabled: boolean;\n};\n\nconst AddButton: VFC<Props> = ({ addTask, disabled }) => (\n  <Button color=\"olive\" onClick={addTask} disabled={disabled}>\n    +\n  </Button>\n);\n\nexport default AddButton;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint @typescript-eslint/no-explicit-any: 0 */\nimport { VFC } from 'react';\n\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\ntype Props = {\n  taskName: string;\n  onChangeHandler: (target: any) => void;\n};\n\nconst InputForm: VFC<Props> = ({ taskName, onChangeHandler }) => (\n  <input\n    type=\"text\"\n    placeholder=\"Enter any task that you have to do.\"\n    className=\"inputForm\"\n    value={taskName}\n    onChange={onChangeHandler}\n  />\n);\n\nexport default InputForm;\n","import { VFC } from 'react';\nimport { Button } from 'semantic-ui-react';\n\nconst Introduction: VFC = () => {\n  const vanishIntroduction = () => {\n    document\n      .querySelector('.introduction-space')\n      ?.classList.toggle('introduction-space-none');\n  };\n\n  return (\n    <>\n      <div className=\"introduction-space\">\n        <Button color=\"facebook\" onClick={() => vanishIntroduction()}>\n          Got it!\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default Introduction;\n","/* eslint @typescript-eslint/no-unsafe-member-access: 0 */\n/* eslint no-alert: 0 */\n// TODO event.targetを引数に指定できない方法を調査する。一旦問題が出ないことは確認済みなのでanyで回避。\nimport { useState, VFC } from 'react';\nimport { Item, Icon, Button } from 'semantic-ui-react';\nimport { Container, Draggable, DropResult } from 'react-smooth-dnd';\nimport arrayMove from 'array-move';\nimport ResetButton from '../atoms/ResetButton';\nimport AddButton from '../atoms/AddButton';\nimport InputForm from '../atoms/InputForm';\nimport Introduction from '../atoms/Intoduction';\n\n// タスクの型定義\nexport type Task = {\n  id: number;\n  title: string;\n};\n\nconst TaskList: VFC = () => {\n  // ------------------------------------\n  // stateの制御\n\n  // タスク名\n  const [taskName, setTaskName] = useState<string>('');\n  // タスクのid\n  const [idCnt, setIdCnt] = useState(1);\n  // 追加ボタンの非活性\n  const [disabled, setDisabled] = useState(true);\n  // タスクのリスト\n  const [tasks, setTask] = useState<Task[]>([\n    {\n      id: idCnt,\n      title: 'You can Add tasks, Delete, and Sort.',\n    },\n    {\n      id: 999999998,\n      title: 'Happy Tasking!',\n    },\n    {\n      id: 999999999,\n      title: '👌',\n    },\n  ]);\n\n  // ------------------------------------\n  // stateの操作用関数の定義\n\n  // ---タスクの追加\n  const addTask = () => {\n    const newIdCnt = idCnt + 1;\n    setIdCnt(newIdCnt);\n    setTask([\n      ...tasks,\n      {\n        id: newIdCnt,\n        title: taskName,\n      },\n    ]);\n\n    // 入力された値をクリアーする\n    setTaskName('');\n    setDisabled(true);\n  };\n\n  // ---タスクの削除\n  const deleteTask = (index: number) => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTask(newTasks);\n  };\n\n  // ---全てのタスクのリセット\n  const reset = () => {\n    const confirmAnswer = window.confirm('Do you wanna delete All Task ?');\n    // キャンセルされた場合はリセットを中断\n    if (!confirmAnswer) {\n      return;\n    }\n\n    setTask([]);\n  };\n\n  // ---タスクのタイトルの入力をフォームで受け付けるための関数\n  const handleValue = (target: HTMLInputElement) => {\n    // 35文字以上の入力はタスクからはみ出てしまうので受け付けない\n    if (target.value.length > 35) {\n      return;\n    }\n    setTaskName(target !== null ? target.value : '');\n    setDisabled(!(target.value.length > 0));\n  };\n\n  // ---タスクをドラッグ&ドロップでソート可能にするための関数\n  const onDrop = (dropResult: DropResult) => {\n    // `DropResult` で型定義\n    const { removedIndex, addedIndex } = dropResult;\n    setTask((tasksArray) =>\n      arrayMove(tasksArray, removedIndex || 0, addedIndex || 0),\n    );\n  };\n\n  return (\n    <>\n      <div className=\"task-list-container\">\n        <InputForm\n          taskName={taskName}\n          onChangeHandler={(e) => handleValue(e.target)}\n        />\n        <AddButton addTask={addTask} disabled={disabled} />\n        <ResetButton reset={reset} />\n\n        <Item.Group>\n          <Container\n            dragHandleSelector=\".dragHandleSelector\"\n            lockAxis=\"y\"\n            onDrop={onDrop}\n          >\n            {tasks.map((task, index) => (\n              <Draggable key={task.id}>\n                <Item key={task.id} className=\"task\">\n                  <Item.Content>\n                    <Icon className=\"taskIcon\" name=\"certificate\" size=\"big\" />\n                    <span className=\"taskNumber\">{index + 1}</span>\n                    <Item.Header className=\"taskHeader\">\n                      {task.title}\n                    </Item.Header>\n                    <Icon\n                      className=\"dragHandleSelector\"\n                      name=\"sort\"\n                      size=\"big\"\n                    />\n                    <Button\n                      className=\"delete\"\n                      color=\"yellow\"\n                      size=\"mini\"\n                      onClick={() => deleteTask(index)}\n                    >\n                      ×\n                    </Button>\n                  </Item.Content>\n                </Item>\n              </Draggable>\n            ))}\n          </Container>\n        </Item.Group>\n        <Introduction />\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import { VFC } from 'react';\nimport ApplicationHeader from '../templates/ApplicationHeader';\nimport TaskList from '../templates/TaskList';\n\nconst Home: VFC = () => (\n  <>\n    <ApplicationHeader />\n    <TaskList />\n  </>\n);\n\nexport default Home;\n","import { VFC } from 'react';\nimport { Helmet } from 'react-helmet';\nimport Home from './component/pages/Home';\nimport './App.css';\n\nconst App: VFC = () => (\n  // window.onload = () =>\n  //   window.alert('Welcome! You can manage any task that you have to do!');\n\n  <>\n    <Helmet>\n      <style>{'body { background-color: #F4EFE3; }'}</style>\n    </Helmet>\n    <Home />\n  </>\n);\nexport default App;\n","/* eslint @typescript-eslint/explicit-module-boundary-types: 0 */\n/* eslint no-console: 0 */\nimport { ReportHandler } from 'web-vitals';\n\ntype Error = {\n  message: string;\n};\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((error: Error) => {\n        console.log(error.message);\n      });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}